/*
int8: представляет целое число от -128 до 127 и занимает в памяти 1 байт (8 бит)

int16: представляет целое число от -32768 до 32767 и занимает в памяти 2 байта (16 бит)

int32: представляет целое число от -2147483648 до 2147483647 и занимает 4 байта (32 бита)

int64: представляет целое число от –9 223 372 036 854 775 808 до 9 223 372 036 854 775 807 и занимает 8 байт (64 бита)

uint8: представляет целое число от 0 до 255 и занимает 1 байт

uint16: представляет целое число от 0 до 65535 и занимает 2 байта

uint32: представляет целое число от 0 до 4294967295 и занимает 4 байта

uint64: представляет целое число от 0 до 18 446 744 073 709 551 615 и занимает 8 байт

byte: синоним типа uint8, представляет целое число от 0 до 255 и занимает 1 байт

rune: синоним типа int32, представляет целое число от -2147483648 до 2147483647 и занимает 4 байта

int: представляет целое число со знаком, которое в зависимости о платформы может занимать либо 4 байта, либо 8 байт. То есть соответствовать либо int32, либо int64.

uint: представляет целое беззнаковое число только без знака, которое, аналогично типу int, в зависимости о платформы может занимать либо 4 байта, либо 8 байт. То есть соответствовать либо uint32, либо uint64.
*/

package main

import "fmt"

func main() {
	// Целочисленные типы
	var a int8 = -1
	var b uint8 = 2
	var c byte = 3  // byte - синоним типа uint8
	var d int16 = -4
	var f uint16 = 5
	var g int32 = -6
	var h rune = -7     // rune - синоним типа int32
	var j uint32 = 8
	var k int64 = -9
	var l uint64 = 10
	var m int = 102
	var n uint = 105

	// Числа с плавающей точкой
	var f float32 = 18
	var g float32 = 4.5
	var d float64 = 0.23
	var pi float64 = 3.14
	var e float64 = 2.7

	// Комплексные числа
	var f complex64 = 1+2i
    var g complex128 = 4+3i

	// Тип bool
	var isAlive bool = true
    var isEnabled bool = false

	// Строки
	var name string = "Том Сойер"
	var name = "Tom"
    name := "Tom"
	var name string = "Tom"
	var (
        name = "Tom"
        age = 27
	)
	var name, age = "Tom", 27
    /*
	\n: переход на новую строку

	\r: возврат каретки

	\t: табуляция

	\": двойная кавычка внутри строк

	\\: обратный слеш
	*/
}